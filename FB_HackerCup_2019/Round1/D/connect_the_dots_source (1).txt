#ifndef LOCAL
#pragma GCC optimize("O3")
#endif
#include <bits/stdc++.h>
using namespace std;
#define sim template < class c
#define ris return * this
#define dor > debug & operator <<
#define eni(x) sim > typename \
  enable_if<sizeof dud<c>(0) x 1, debug&>::type operator<<(c i) {
sim > struct rge { c b, e; };
sim > rge<c> range(c i, c j) { return rge<c>{i, j}; }
sim > auto dud(c* x) -> decltype(cerr << *x, 0);
sim > char dud(...);
struct debug {
#ifdef LOCAL
~debug() { cerr << endl; }
eni(!=) cerr << boolalpha << i; ris; }
eni(==) ris << range(begin(i), end(i)); }
sim, class b dor(pair < b, c > d) {
  ris << "(" << d.first << ", " << d.second << ")";
}
sim dor(rge<c> d) {
  *this << "[";
  for (auto it = d.b; it != d.e; ++it)
    *this << ", " + 2 * (it == d.b) << *it;
  ris << "]";
}
#else
sim dor(const c&) { ris; }
#endif
};
#define imie(...) " [" << #__VA_ARGS__ ": " << (__VA_ARGS__) << "] "

typedef long long ll;

const int INF = 1e9 + 5;

void test_case() {
	int n, H, V;
	scanf("%d%d%d", &n, &H, &V);
	auto read = [&]() {
		vector<int> vec(n);
		int x1, x2, ax, bx, cx, dx;
		scanf("%d%d%d%d%d%d", &x1, &x2, &ax, &bx, &cx, &dx);
		vec[0] = x1;
		vec[1] = x2;
		for(int i = 2; i < n; i++) {
			vec[i] = ((ll) ax * vec[i-2] + (ll) bx * vec[i-1] + cx) % dx + 1;
		}
		return vec;
	};
	vector<int> tmp_x = read();
	vector<int> tmp_y = read();
	if(V + H < n) {
		puts("-1");
		return;
	}
	vector<pair<int,int>> they(n);
	for(int i = 0; i < n; ++i) {
		they[i] = {tmp_x[i], tmp_y[i]};
	}
	sort(they.begin(), they.end(), [&](const pair<int,int>& a, const pair<int,int>& b) {
		return make_pair(a.second, a.first) < make_pair(b.second, b.first);
	});
	vector<int> suf(they.size() + 1);
	for(int i = (int) they.size() - 1; i >= 0; --i) {
		suf[i] = max(they[i].first, suf[i+1]);
	}
	multiset<int> secik;
	int already = 0;
	int answer = 2 * INF;
	if(H == n) {
		answer = suf[0];
	}
	for(int i = 0; i < (int) they.size(); ++i) {
		secik.insert(they[i].first);
		if((int) secik.size() > V) {
			already = max(already, *secik.begin());
			secik.erase(secik.begin());
		}
		if((int) secik.size() >= n - H) {
			answer = min(answer, they[i].second + max(already, suf[i+1]));
		}
	}
	printf("%d\n", answer);
}

int main() {
	int T;
	scanf("%d", &T);
	for(int nr = 1; nr <= T; ++nr) {
		cerr << "test " << nr << endl;
		printf("Case #%d: ", nr);
		test_case();
	}
}
